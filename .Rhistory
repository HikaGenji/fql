install.packages("TTR")
install.packages("bookdown")
install.packages("flexdashboard")
install.packages("TTR")
install.packages("colorspace")
install.packages("magrittr")
library(fql)
compose
Compose
%!%
"a"%!%"b"
f <- function(x) 1+x
g <- function(x) x^2
f %o% g
f %o% g %.% 2
(f %o% g)
(f %o% g)(2)
2 %>% f%o%g
2 %>% (f%o%g)
library(help="functionWithTrace-class")
library(help="functional")
Curry
"%.%" <- function(FUN, ...) {
Curry(FUN, list(...))
}
f
f <- function(x, y) x - y
Curry(f, y=2)
2 %.% f
(2 %.% f)
(2 %.% f)(2)
"%/%" <- Reduce
"+" %/% 1:10
?Reduce
"%\%" <- Curry(Reduce, accumulate=TRUE)
"%\\%" <- Curry(Reduce, accumulate=TRUE)
'%\%' <- Curry(Reduce, accumulate=TRUE)
'%\\%' <- Curry(Reduce, accumulate=TRUE)
"%/%" <- Reduce
"+" %/% 1:10
# over
'%\\%' <- Curry(Reduce, accumulate=TRUE)
"+" %\\% 1:10
"%\\%" <- Curry(Reduce, accumulate=TRUE)
"+" %\\% 1:10
"+" %over% 1:10
"%over%" <- Curry(Reduce, accumulate=TRUE)
"+" %over% 1:10
"%scan%" <- Reduce
"+" %scan% 1:10
# over
"%over%" <- Curry(Reduce, accumulate=TRUE)
"+" %over% 1:10
/ %o% length
2 / 3
"/"
"%/%"
'%/%'
'%/%'(2, 3)
2'%/%'3
?"/"
%/%
"% %" <- function(f, g) {
f%o%g
}
f % % g
f % % g % % h
f % % g % % length
f <- function(x) sum(x)
g <- function(x, y) x / y
h <- function(x) length(x)
f % % g % % h
(f % % g % % h)
(f % % g % % h)(1.9)
(f % % g % % h)(1:9)
f <- function(x) sum(x)
g <- function(x, y) x / y
h <- function(x) length(x)
"% %" <- function(...) {
f <- list(...)
browser()
}
f <- sum
g <- function(x, y) x / y
h <- length
"% %" <- function(...) {
f <- list(...)
browser()
}
% %
% %(f, g, h)
fork <- function(...) {
f <- list(...)
browser()
}
fork(f, g, h)
fork <- function(f, g, h) {
function(x) g(f(x), h(x))
}
fork <- function(f, g, h) {
function(x) g(f(x), h(x))
}
fork(sum, g, length)
fork(sum, g, length)(1:24)
"+" %!/% 1:10
"%!/r%" <- Curry(Reduce, accumulate=TRUE)
"+" %!/% 1:10
"%!/%" <- Curry(Reduce, accumulate=TRUE)
"+" %!/% 1:10
".\%" <- Curry(Reduce, accumulate=TRUE)
"+" %.\% 1:10
".\\%" <- Curry(Reduce, accumulate=TRUE)
"+" %.\\% 1:10
'\\%' <- Curry(Reduce, accumulate=TRUE)
"+" %\\% 1:10
'./' <- Curry(Reduce, accumulate=TRUE)
"+" %./% 1:10
"./" <- Curry(Reduce, accumulate=TRUE)
"+" %./% 1:10
"!/" <- Curry(Reduce, accumulate=TRUE)
"+" %!/% 1:10
"+" %/%
1
"!/" <- Curry(Reduce, accumulate=TRUE)
"+" %!/% 1:10
require(functional)
require(magrittr)
"%scan%" <- Reduce
"+" %scan% 1:10
"%//%" <- Reduce
"+" %//% 1:10
"%\\%" <- Curry(Reduce, accumulate=TRUE)
"+" %\\% 1:
"+" %\\% 1:10
"%scan%" <- Reduce
"+" %scan% 1:10
# over
"%over%" <- Curry(Reduce, accumulate=TRUE)
"+" %over% 1:10
stopifnot("+" %scan% 1:10==55)
stopifnot("+" %over% 1:10==cumsum(1:10))
hook <- function(...) {
do.call(multi.argument.Compose, rev(list(...)))
}
"%o%" <- hook
stopifnot(((function(x) x^2) %o% (function(x, y) x+y))(1, 1)==4)
fork <- function(f, g, h) {
i <- function(x, y) do.call(g, list(x, y))
function(x) {
i(get("f")(x), get("h")(x))
}
}
avg <- fork(sum, '/', length)
stopifnot(avg(1:10)==5.5)
avg <- fork(function(x) sum(x), function(x, y) x / y, function(x) length(x))
stopifnot(avg(1:10)==5.5)
train <- function(...) {
l <- list(...)
if(length(l)==2) {
return(hook(l[[1]], l[[2]]))
}
if(length(l)==3) {
return(do.call(fork, l))
}
if(length(l) %% 2 == 0) {
hook(unlist(l)[[1]], train(unlist(l[-1])))
} else {
browser()
fork(unlist(l)[[1]], unlist(l)[[2]], train(unlist(l[-1])))
}
}
# hook
i <- train(function(x) 1 + x, function(x) x ^ 2)
stopifnot(i(2)!=26)
i <- train(function(x) sum(x), function(x, y) x / y, function(x) length(x))
stopifnot(i(1:10)==5.5)
stopifnot(i(2)==26)
i(2)
i <- train(function(x) 1 + x, function(x) x ^ 2)
stopifnot(i(2)==26)
i(2)
i <- train(function(x) 1 + x, function(x) x ^ 2)
stopifnot(i(2)==5)
# fork
i <- train(function(x) sum(x), function(x, y) x / y, function(x) length(x))
stopifnot(i(1:10)==5.5)
i <- train(function(x) -x, function(x) sum(x), function(x, y) x / y, function(x) length(x))
i(1:10)
train <- function(...) {
l <- list(...)
if(length(l)==2) {
return(hook(l[[1]], l[[2]]))
}
if(length(l)==3) {
return(do.call(fork, l))
}
if(length(l) %% 2 == 0) {
hook(unlist(l)[[1]], train(unlist(l[-1])))
} else {
fork(unlist(l)[[1]], unlist(l)[[2]], train(unlist(l[-1])))
}
}
i(1:10)
debug(i)
i(1:10)
undebug(i)
debug(fork)
i(1:10)
i <- train(function(x) -x, function(x) sum(x), function(x, y) x / y, function(x) length(x))
str(f)
str(g)
str(h)
str(g)
i <- train(function(x) -x, function(x) sum(x), function(x, y) x / y, function(x) length(x))
debug(train)
i <- train(function(x) -x, function(x) sum(x), function(x, y) x / y, function(x) length(x))
unlist(l)[[1]]
str(hook)
train <- function(...) {
l <- list(...)
if(length(l)==2) {
return(hook(l[[1]], l[[2]]))
}
if(length(l)==3) {
return(do.call(fork, l))
}
if(length(l) %% 2 == 0) {
hook(unlist(l)[[1]], do.call(train, unlist(l[-1])))
} else {
fork(unlist(l)[[1]], unlist(l)[[2]], do.call(train, unlist(l[-1])))
}
}
i <- train(function(x) -x, function(x) sum(x), function(x, y) x / y, function(x) length(x))
i(1:10)
i <- train(function(x) -x, function(x) sum(x), function(x, y) x / y, function(x) length(x))
stopifnot(i(1:10)== -5,5)
stopifnot(i(1:10)== -5.5)
train <- function(...) {
l <- list(...)
if(length(l)=1) {
return(unlist(l))
}
if(length(l)==2) {
return(hook(l[[1]], l[[2]]))
}
if(length(l)==3) {
return(do.call(fork, l))
}
if(length(l) %% 2 == 0) {
hook(unlist(l)[[1]], do.call(train, unlist(l[-1])))
} else {
fork(unlist(l)[[1]], unlist(l)[[2]], do.call(train, unlist(l[-1])))
}
}
train <- function(...) {
l <- list(...)
if(length(l)==1) {
return(unlist(l))
}
if(length(l)==2) {
return(hook(l[[1]], l[[2]]))
}
if(length(l)==3) {
return(do.call(fork, l))
}
if(length(l) %% 2 == 0) {
hook(unlist(l)[[1]], do.call(train, unlist(l[-1])))
} else {
fork(unlist(l)[[1]], unlist(l)[[2]], do.call(train, unlist(l[-1])))
}
}
i <- train(function(x) 1 + x, function(x) x ^ 2)
stopifnot(i(2)==5)
# fork
i <- train(function(x) sum(x), function(x, y) x / y, function(x) length(x))
stopifnot(i(1:10)==5.5)
# 4: - avg
i <- train(function(x) -x, function(x) sum(x), function(x, y) x / y, function(x) length(x))
stopifnot(i(1:10)== -5.5)
i(1:10)
i(10)
i(2)
i <- train(function(x) -x, function(x) sum(x), function(x, y) x / y, function(x) length(x))
undebug(train)
i <- train(function(x) -x, function(x) sum(x), function(x, y) x / y, function(x) length(x))
stopifnot(i(1:10)== -5.5)
q()
